CREATE DATABASE Online_Book_Store;
USE Online_Book_Store;
ALTER TABLE books
	MODIFY Book_ID	INT	PRIMARY KEY,
	MODIFY	Title	VARCHAR(100),	
	MODIFY	Author	VARCHAR(100),	
	MODIFY	Genre	VARCHAR(50),	
	MODIFY	Published_Year	INT,	
	MODIFY	Price	NUMERIC(10,2),	
	MODIFY	Stock	INT;	
    
    
ALTER TABLE customers
	MODIFY	Customer_ID	INT	PRIMARY KEY,
	MODIFY	Name	VARCHAR(100),	
	MODIFY	Email	VARCHAR(100),	
	MODIFY	Phone	VARCHAR(15),	
	MODIFY	City	VARCHAR(50),
	MODIFY	Country	VARCHAR(150);	
    
ALTER TABLE orders
	MODIFY	Order_ID	INT	PRIMARY KEY,
	MODIFY	Customer_ID	INT,
	MODIFY	Book_ID	INT,
	MODIFY	Order_Date	DATE,
	MODIFY	Quantity	INT,
	MODIFY	Total_Amount	NUMERIC(10,2),
    ADD CONSTRAINT cust_ref FOREIGN KEY (Customer_ID) REFERENCES customers(Customer_ID),
    ADD CONSTRAINT book_ref FOREIGN KEY (Book_ID) REFERENCES books(Book_ID);
    
-- Q1 : Retrieve all books in "Fiction" genre
SELECT * FROM books WHERE Genre = 'Fiction';

-- Q2 : Find books that were published after 1950
SELECT * FROM books  WHERE Published_Year > 1950 ORDER BY Published_Year;

-- Q3 : List all customers form CANEDA
SELECT * FROM customers WHERE Country = 'Canada';

-- Q4 : Show orders placed in NOVEMBER 2023
SELECT * FROM orders WHERE Order_Date BETWEEN '2023-11-01' AND '2023-11-30'ORDER BY Order_Date;

-- Q5 : RETRIEVE the total stock of books available
SELECT SUM(stock) FROM books;

-- Q6 : Find the details of the most expensive book
SELECT * FROM books ORDER BY Price DESC LIMIT 1;

-- Q7 : Show all customers who ordered more than one book
SELECT * FROM orders WHERE Quantity > 1; 

-- Q8 : Retrieve all orders where total amount succeeds $20
SELECT * FROM orders WHERE Total_Amount > 20.00 ORDER BY Total_Amount;

-- Q9 : List all genre listed in books table
SELECT DISTINCT Genre FROM books;

-- Q10 : Find the book with the lowest stocks
SELECT * FROM books ORDER BY stock LIMIT 1;
SELECT * FROM books WHERE stock = 0;
 
-- Q11 : Calculate the total revenue generated by all orders
SELECT SUM(Total_Amount) AS Total_Revenue FROM orders;

-- ADVANCE QUESTION
-- Q12 : Retrieve the total amount of books sold for each genre
SELECT books.genre, SUM(orders.Quantity) FROM books 
LEFT JOIN orders ON books.Book_ID = orders.Book_ID GROUP BY books.genre
UNION
SELECT books.genre, SUM(orders.Quantity) FROM books 
RIGHT JOIN orders ON books.Book_ID = orders.Book_ID GROUP BY books.genre;

-- Q13 : Find the average price of books in the "Fantasy" genre
SELECT genre, SUM(Price) FROM books WHERE genre = 'Fantasy' GROUP BY genre;

-- Q14 : List customers who have placed atleast 2 orders
SELECT c.Customer_ID, c.Name, COUNT(o.Order_ID) FROM customers c JOIN orders o 
ON c.Customer_ID = o.Customer_ID
GROUP BY c.Customer_ID, c.Name 
HAVING COUNT(Order_ID)>=2;

-- Q15 : Find the most frequently ordered book
SELECT b.Book_ID, b.Title, o.Quantity FROM books b
JOIN orders o ON b.Book_ID = o.Book_ID ORDER BY o.Quantity DESC LIMIT 1;

-- Q16 : Show the top 3 books of 'Fantasy' Genre
SELECT * FROM books WHERE Genre = 'Fantasy' ORDER BY Price DESC LIMIT 3;

-- Q17 : Retrieve the total quantity of books sold by each author
SELECT b.Book_ID, b.Author, SUM(o.Quantity) FROM books b JOIN orders o 
	ON b.Book_ID = o.Book_ID GROUP BY b.Book_ID, b.Author ORDER BY SUM(o.Quantity);
    
-- Q18 : Retrieve the total quantity of books sold by each author
SELECT b.Book_ID, b.Author, SUM(o.Quantity) FROM books b JOIN orders o 
	ON b.Book_ID = o.Book_ID GROUP BY b.Book_ID, b.Author ORDER BY SUM(o.Quantity);
SELECT * FROM orders;
-- Q19 : List the cities where customers who spent over $30 are located
SELECT c.City, SUM(o.Total_Amount) FROM customers c JOIN orders o 
ON c.Customer_ID = o.Customer_ID GROUP BY c.City HAVING SUM(o.Total_Amount) > 30.00 ORDER BY SUM(o.Total_Amount);

-- Q20 : Find the customers who spent most on orders
SELECT c.Customer_ID, c.name, SUM(o.Total_Amount) FROM customers c JOIN orders o
ON c.Customer_ID = o.Customer_ID GROUP BY c.Customer_ID, c.name ORDER BY SUM(o.Total_Amount) DESC;

-- Q21 : Calculate the stock remaining after fulfilling all the orders
SELECT b.Book_ID, b.Title, b.Stock, COALESCE(SUM(o.Quantity),0) AS Ordered_Quantity, b.Stock - COALESCE(SUM(o.Quantity),0) AS Remaining_Stock
FROM books b LEFT JOIN orders o ON b.Book_ID = o.Book_ID GROUP BY b.Book_ID ORDER BY  SUM(o.Quantity) ;